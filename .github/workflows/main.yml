name: SAY GEX

on:
  workflow_dispatch:
    inputs:
      code:
        description: PAY GORN
        required: true

jobs:
  build:
    name: Free Fire Ripper Lab Running
    runs-on: windows-latest
    timeout-minutes: 43800

    steps:
    - name: Disable Firewall Profiles
      run: |
        try {
          Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
        } catch {
          Write-Host "Failed to disable firewall. Continuing..."
        }

    - name: Install Necessary Packages
      run: |
        function Install-PackageWithRetry {
            param ([string]$packageName)
            $maxRetries = 3
            $retryCount = 0
            while ($retryCount -lt $maxRetries) {
                try {
                    choco install $packageName -y --ignore-checksums
                    return
                } catch {
                    Write-Host "Retrying $packageName install ($($retryCount+1)/$maxRetries)"
                    Start-Sleep -Seconds 10
                    $retryCount++
                }
            }
            throw "$packageName failed to install via Chocolatey after multiple attempts."
        }
        Install-PackageWithRetry -packageName "chrome-remote-desktop-host"
        Install-PackageWithRetry -packageName "googlechrome"

    - name: Set Desktop Wallpaper
      run: |
        $WallpaperUrl = "https://i.ibb.co/7QBjY1q/20241214-020008.jpg"
        $WallpaperPath = "$Env:USERPROFILE\Documents\wallpaper.jpg"
        $RetryCount = 0
        $MaxRetries = 5  # Increased retries

        while ($RetryCount -lt $MaxRetries) {
            try {
                Invoke-WebRequest -Uri $WallpaperUrl -OutFile $WallpaperPath -ErrorAction Stop
                Write-Host "Wallpaper downloaded successfully."
                break
            } catch {
                Write-Host "Attempt $($RetryCount+1) failed. Retrying in 10 seconds..."
                Start-Sleep -Seconds 10
                $RetryCount++
            }
        }

        if (!(Test-Path $WallpaperPath)) {
            Write-Host "Failed to download wallpaper after $MaxRetries attempts."
            exit 1
        }

        # Set the wallpaper
        Add-Type -TypeDefinition @"
        using System;
        using System.Runtime.InteropServices;
        public class Wallpaper {
            [DllImport("user32.dll", CharSet = CharSet.Auto)]
            public static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);
        }
        "@

        [Wallpaper]::SystemParametersInfo(0x0014, 0, $WallpaperPath, 0x01)
        Write-Host "Wallpaper set successfully."

    - name: Download and Extract Free Fire Ripper
      run: |
        cd C:\Users\$Env:USERNAME\Documents
        try {
          Invoke-WebRequest -Uri "https://example.com/ffripper.zip" -OutFile ffripper.zip
          7z x ffripper.zip -y
          Write-Host "Download and extraction completed."
        } catch {
          Write-Host "Download or extraction failed."
          exit 1
        }

    - name: Start Chrome Remote Desktop
      run: |
        function Start-RemoteDesktop {
          $paths = @("${Env:PROGRAMFILES(X86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe", "${Env:PROGRAMFILES}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe")
          foreach ($path in $paths) {
              if (Test-Path $path) { & $path; return }
          }
          Write-Host "Chrome Remote Desktop's remoting_start_host.exe not found."
        }
        Start-RemoteDesktop

    - name: Create Symbolic Links
      run: |
        New-Item -ItemType SymbolicLink -Target "C:\Users\$Env:USERNAME\Documents\FenixGaga\Engine\ProjectTitan.exe" -Path "C:\Users\$Env:USERNAME\Desktop\Free Fire.lnk"
        New-Item -ItemType SymbolicLink -Target "C:\Users\$Env:USERNAME\Documents\ninjaripper\x86\NinjaRipper.exe" -Path "C:\Users\$Env:USERNAME\Desktop\Ninjaripper.lnk"
        New-Item -ItemType SymbolicLink -Target "C:\Users\$Env:USERNAME\Documents\noesis\Noesis64.exe" -Path "C:\Users\$Env:USERNAME\Desktop\Noesis.lnk"

    - name: Start Remote Desktop Session
      run: |
        Write-Host "Connecting to VM with Remote Desktop"
        ${{ inputs.code }} --pin=444444

    - name: Keep Connection Active
      run: |
        $i = 43800
        do {
            Write-Host $i
            Start-Sleep 60
            $i--
        } while ($i -gt 0)
